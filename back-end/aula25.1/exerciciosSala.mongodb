use('class')
db.articles.aggregate(
  [{ $match : { author : "dave" } }]
);

use('class')
db.articles.aggregate(
  [
    {
$match: {
$or: [
          { score: { $gt: 70, $lt: 90 } },
          { views: { $gte: 1000 } }
        ]
      }
    }
  ]
);

use('class');
db.transactions.insertMany([
  { value: 5900, from: "Dave America", to: "Ned Flanders", bank: 'International' },
  { value: 1000, from: "Mark Zuck", to: "Edna Krabappel", bank: 'FloridaBank' },
  { value: 209, from: "Lisa Simpson", to: "Dave America", bank: 'bankOfAmerica' },
  { value: 10800, from: "Arnold Schuz", to: "Mark Zuck", bank: 'JPMorgan' },
  { value: 850, from: "Barney Gumble", to: "Lisa Simpson", bank: 'Citigroup' },
  { value: 76000, from: "Ned Flanders", to: "Edna Krabappel", bank: 'JPMorgan' },
  { value: 1280, from: "Dave America", to: "Homer Simpson", bank: 'Citigroup' },
  { value: 7000, from: "Arnold Schuz", to: "Ned Flanders", bank: 'International' },
  { value: 59020, from: "Homer Simpson", to: "Lisa Simpson", bank: 'International' },
  { value: 100, from: "Mark Zuck", to: "Barney Gumble", bank: 'FloridaBank' },
]);

// Selecione todas as transações feitas pelo cliente chamado "Dave America".
use('class')
db.transactions.aggregate(
  [
    { $match: {
        from: "Dave America"
        }
      }
  ]
);
// Selecione todas as transações com o valor entre 700 e 6000, ou que sejam recebidas pela cliente "Lisa Simpson".
use('class')
db.transactions.aggregate(
  [
    {
      $match: {
        $and: [
          { value: { $gte: 700, $lte: 6000 } },
          { to: "Lisa Simpson" }
        ]
      }
    }
  ]
);
// Selecione três transações com o valor acima de 1000.
use('class')
db.transactions.aggregate(
  [
    {
      $match: {
        value: { $gt: 1000 }
      }
    },
      { $limit: 3 }
  ]
);

// $project
use('class')
db.books.insertOne(
  {
    _id: 1,
    title: "A Fundação",
    isbn: "0001122223334",
    author: { last: "Asimov", first: "Isaac" },
    copies: 5
  }
)


use('class')
db.books.aggregate([
  {
$project : {
      "author.first": 0,
      copies: 0
    }
  }
]);


use('class')
db.books.aggregate([
  {
$project: {
      title: 1,
      isbn: {
        prefix: { $substr: ["$isbn", 0, 3] },
        group: { $substr: ["$isbn", 3, 2] },
        publisher: { $substr: ["$isbn", 5, 4] },
        title: { $substr: ["$isbn", 9, 3] },
        checkDigit: { $substr: ["$isbn", 12, 1] }
      },
      lastName: "$author.last",
      copiesSold: "$copies"
    }
  }
]);

// $group
use('class')
db.sales.insertMany([
{
  _id: 1,
  item: "Código Limpo",
  price: NumberDecimal("10"),
  quantity: NumberInt("2"),
  date: ISODate("2014-03-01T08:00:00Z")
},
{
  _id: 2,
  item: "O Homem e Seus Símbolos",
  price: NumberDecimal("20"),
  quantity: NumberInt("1"),
  date: ISODate("2014-03-01T09:00:00Z")
},
{
  _id: 3,
  item: "Comunicação Não-Violenta",
  price: NumberDecimal("5"),
  quantity: NumberInt( "10"),
  date: ISODate("2014-03-15T09:00:00Z")
},
{
  _id: 4,
  item: "Comunicação Não-Violenta",
  price: NumberDecimal("5"),
  quantity:  NumberInt("20"),
  date: ISODate("2014-04-04T11:21:39.736Z")
},
{
  _id: 5,
  item: "Código Limpo",
  price: NumberDecimal("10"),
  quantity: NumberInt("10"),
  date: ISODate("2014-04-04T21:23:13.331Z")
},
{
  _id: 6,
  item:"A Coragem de Ser Imperfeito",
  price: NumberDecimal("7.5"),
  quantity: NumberInt("5" ),
  date: ISODate("2015-06-04T05:08:13Z")
},
{
  _id: 7,
  item: "A Coragem de Ser Imperfeito",
  price: NumberDecimal("7.5"),
  quantity: NumberInt("10"),
  date: ISODate("2015-09-10T08:43:00Z")
},
{
  _id: 8,
  item: "Código Limpo",
  price: NumberDecimal("10"),
  quantity: NumberInt("5" ),
  date: ISODate("2016-02-06T20:20:13Z")
}
]);

use('class')
db.sales.aggregate([
  {
$group: {
      _id: null,
      count: { $sum: 1 }
    }
  }
]);


use('class')
db.sales.aggregate([
  {
$group : {
      _id : "$item",
      totalSaleAmount: {
$sum: {
$multiply: ["$price", "$quantity"]
        }
      }
    }
  }
]);


// Selecione todos os bancos, ou seja, valores do campo bank ;
use('class')
db.transactions.aggregate(
  [
    {
      $group: {
        _id: null,
        bank: { $sum: 1 }
      } 
    }
  ]
);

// Selecione o valor total das transações em cada banco e quantas são;
use('class')
db.transactions.aggregate(
  [
    {
      $group: {
        _id: "$bank",
        totalValue: { $sum: "$value" },
        qnt: { $sum: 1 }
      }
    }
  ]
);

// Selecione o valor total de transações por banco;
use('class')
db.transactions.aggregate(
  [
    {
      $group: {
        _id: "$bank",
        totalValue: { $sum: "$value" },
      }
    }
  ]
);

// Selecione os bancos que têm o valor total de transações maior que 1000.
use('class')
db.transactions.aggregate(
  [
    {
      $group: {
        _id: "$bank",
        totalValue: { $sum: "$value" },
        qnt: { $sum: 1 }
      }
    },
    {
      $match: {
        totalValue: { $gt: 1000 }
      }
    }
  ]
);

// $lookUp

use('class');
db.clients.insertMany([
  { name: "Dave America", State: "Florida" },
  { name: "Ned Flanders", State: "Alasca" },
  { name: "Mark Zuck", State: "Texas" },
  { name: "Edna Krabappel", State: "Montana" },
  { name: "Arnold Schuz", State: "California" },
  { name: "Lisa Simpson", State: "Florida" },
  { name: "Barney Gumble", State: "Texas" },
  { name: "Homer Simpson", State: "Florida" },
]);

// Selecione todos os clientes com as suas respectivas transações feitas;
use('class')
db.clients.aggregate([
  {
$lookup: {
      from: "transactions",
      localField: "name",
      foreignField: "from",
      as: "transactions_history"
    },
  },
]);

// Selecione quatro clientes com as suas respectivas transações recebidas;
use('class')
db.clients.aggregate([
  {
    $lookup: {
      from: "transactions",
      localField: "name",
      foreignField: "to",
      as: "choosen_clients",
    }
  },
    {
      $limit: 4
    },
])

// Selecione todos os cliente do estado da "Florida" e suas respectivas transações recebidas
use('class')
db.clients.aggregate([
  {
    $lookup: {
      from: "transactions",
      localField: "name",
      foreignField: "to",
      as: "choosen_clients",
    }
  },
    {
      $match: {
        State: "Florida"
      }
    },
])