use("agg_example");
db.clients.insertMany([
  { name: "Dave America", State: "Florida" },
  { name: "Ned Flanders", State: "Alasca" },
  { name: "Mark Zuck", State: "Texas" },
  { name: "Edna Krabappel", State: "Montana" },
  { name: "Arnold Schuz", State: "California" },
  { name: "Lisa Simpson", State: "Florida" },
  { name: "Barney Gumble", State: "Texas" },
  { name: "Homer Simpson", State: "Florida" },
]);

db.transactions.insertMany([
  { value: 5900, from: "Dave America", to: "Ned Flanders", bank: 'International' },
  { value: 1000, from: "Mark Zuck", to: "Edna Krabappel", bank: 'FloridaBank' },
  { value: 209, from: "Lisa Simpson", to: "Dave America", bank: 'bankOfAmerica' },
  { value: 10800, from: "Arnold Schuz", to: "Mark Zuck", bank: 'JPMorgan' },
  { value: 850, from: "Barney Gumble", to: "Lisa Simpson", bank: 'Citigroup' },
  { value: 76000, from: "Ned Flanders", to: "Edna Krabappel", bank: 'JPMorgan' },
  { value: 1280, from: "Dave America", to: "Homer Simpson", bank: 'Citigroup' },
  { value: 7000, from: "Arnold Schuz", to: "Ned Flanders", bank: 'International' },
  { value: 59020, from: "Homer Simpson", to: "Lisa Simpson", bank: 'International' },
  { value: 100, from: "Mark Zuck", to: "Barney Gumble", bank: 'FloridaBank' },
]);

// 

// Selecione todos os clientes com as suas respectivas transações feitas;
use('agg_example');
db.clients.aggregate([
  {
    $lookup: {
      from: "transactions",
      let: { user_name: "$name" },
      pipeline: [
        {
          $match: {
            $expr: {
              $eq: ["$from", "$$user_name"],
            }
          }
        }
      ],
      as: "transactions"
    }
  }
]);
// Selecione os quatro primeiros clientes com as suas respectivas transações recebidas ordenados pelo estado em ordem alfabética;
use('agg_example');
db.clients.aggregate([
  {
$lookup: {
      from: "transactions",
      let: { user_name: "$name" },
      pipeline: [
        {
$match: {
$expr: {
$eq: ["$to", "$$user_name"],
            }
          }
        }
      ],
      as: "received_transactions"
    }
  },
  {
$sort: { State: 1 }
  },
  {
$limit: 4
  }
]);

// Selecione todos os cliente do estado da "Florida" e suas respectivas transações recebidas.
use('agg_example')
db.clients.aggregate(
  [
    {
      $match: { State: "Florida" }
    },
    {
      $lookup: {
        from: 'transactions',
        let: { cliente: "$name" },
        pipeline: [
          {
            $match: {
              $expr: {
                $eq: ["$to", "$$cliente"]
              },
            }
          }
        ],
        as: 'cliente_florida'
      }
    }
  ]
)


// add
use('agg_example')
db.products.insertMany([
  { "name": "Ball", "purchase_price": 7.6, "taxes": 1.9, "sale_price": 12.5, "quantity": 5 },
  { "name": "Baseball bat", "purchase_price": 18.5, "taxes": 5.3, "sale_price": 39.9, "quantity": 12 },
  { "name": "Sneakers", "purchase_price": 10.4, "taxes": 1.50, "sale_price": 14.9, "quantity": 3 },
  { "name": "Gloves", "purchase_price": 2.85, "taxes": 0.90, "sale_price": 5.70, "quantity": 34 },
  { "name": "Jacket", "purchase_price": 28.9, "taxes": 10.80, "sale_price": 59.9, "quantity": 20 },
  { "name": "Mousepad", "purchase_price": 16.6, "taxes": 3.40, "sale_price": 29.9, "quantity": 8 },
  { "name": "Monitor", "purchase_price": 119.9, "taxes": 39.20, "sale_price": 240.6, "quantity": 11 },
]);

//Calcule qual o custo total de cada produto, considerando o preço de compra e os impostos
use('agg_example')
db.products.aggregate(
  [
    {
      $project: {
        name: 1,
        _id: 0,
        total_cost: {
          $add: ["$purchase_price", "$taxes" ] 
        }
      }
    }
  ]
);

// subtratct

//Calcule qual o lucro total de cada produto, considerando o preço de compra, os impostos e seu valor de venda.

use('agg_example')
db.products.aggregate(
  [
    {
      $project: {
        name: 1,
        _id: 0,
        lucro: {
          $subtract: [
            { $multiply: ["$sale_price", "$quantity"]},
            { $add: ["$purchase_price", "$taxes" ] }
          ]
        }
      }
    }
  ]
);

// round e floor e ceil

//Retorne o menor número inteiro relativo ao preço de venda de cada produto;
use('agg_example')
db.products.aggregate(
  [
    {
      $project: {
        name: 1,
        _id: 0,
        preco_arredondado: {
          $floor: "$sale_price"
        }
        }
      }
  ]
);

//Retorne o maior número inteiro relativo ao lucro total sobre cada produto. Nota: Desconsiderar taxas (taxes)
use('agg_example')
db.products.aggregate(
  [
    {
      $project: {
        name: 1,
        _id: 0,
        preco_arredondado: {
          $ceil: {
            $subtract: [
            "$sale_price",
            { $add: ["$purchase_price", "$taxes" ] }
          ]
          }
        }
        },
        }
  ]
);

// ABS
// Calcule o valor absoluto do lucro total de cada produto.
use('agg_example')
db.products.aggregate(
  [
    {
      $project: {
        name: 1,
        _id: 0,
        valorAbsoluto: {
          $abs: { 
            $subtract: [
              '$sale_price',
              { $add: ['$purchase_price', '$taxes'] }
            ]
          }
        }
      }
    }
  ]
);
